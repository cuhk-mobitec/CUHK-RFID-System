/*
 * Generated by XDoclet - Do not edit!
 */
package cuhk.ale.ejb;

/**
 * BMP layer for ECSpecInstance.
 * @xdoclet-generated at ${TODAY}
 * @copyright The XDoclet Team
 * @author XDoclet
 * @version ${version}
 */
public class ECSpecInstanceBMP
   extends cuhk.ale.ejb.ECSpecInstanceBean
   implements javax.ejb.EntityBean
{

   public java.lang.String specName;
   public long startTime;
   public long previousStartTime;
   public long previousEndTime;
   public int stateVersion;
   public epcglobal.ale.ECSpec ECSpec;
   public int state;

   public java.lang.String getSpecName() 
   {
      return this.specName;
   }

   public void setSpecName( java.lang.String specName ) 
   {
      this.specName = specName;
      makeDirty();
   }
   public long getStartTime() 
   {
      return this.startTime;
   }

   public void setStartTime( long startTime ) 
   {
      this.startTime = startTime;
      makeDirty();
   }
   public long getPreviousStartTime() 
   {
      return this.previousStartTime;
   }

   public void setPreviousStartTime( long previousStartTime ) 
   {
      this.previousStartTime = previousStartTime;
      makeDirty();
   }
   public long getPreviousEndTime() 
   {
      return this.previousEndTime;
   }

   public void setPreviousEndTime( long previousEndTime ) 
   {
      this.previousEndTime = previousEndTime;
      makeDirty();
   }
   public int getStateVersion() 
   {
      return this.stateVersion;
   }

   public void setStateVersion( int stateVersion ) 
   {
      this.stateVersion = stateVersion;
      makeDirty();
   }
   public epcglobal.ale.ECSpec getECSpec() 
   {
      return this.ECSpec;
   }

   public void setECSpec( epcglobal.ale.ECSpec ECSpec ) 
   {
      this.ECSpec = ECSpec;
      makeDirty();
   }
   public int getState() 
   {
      return this.state;
   }

   public void setState( int state ) 
   {
      this.state = state;
      makeDirty();
   }

   public boolean isModified()
   {
      return dirty;
   }

   protected void makeDirty()
   {
      dirty = true;
   }

   protected void makeClean()
   {
      dirty = false;
   }

   private boolean dirty = false;

   public cuhk.ale.ejb.interfaces.ECSpecInstancePK ejbCreate(java.lang.String specName,epcglobal.ale.ECSpec spec) throws javax.ejb.CreateException
   {
      super.ejbCreate(specName,spec);

      return getDao().create((cuhk.ale.ejb.ECSpecInstanceBean) this);
   }

   /**
    * Generated ejbPostCreate for corresponding ejbCreate method.
    *
    * @see #ejbCreate(java.lang.String specName,epcglobal.ale.ECSpec spec)
    */
   public void ejbPostCreate(java.lang.String specName,epcglobal.ale.ECSpec spec)
   {
   }

   public cuhk.ale.ejb.interfaces.ECSpecInstancePK ejbFindByPrimaryKey(cuhk.ale.ejb.interfaces.ECSpecInstancePK pk) throws javax.ejb.FinderException
   {
      return getDao().findByPrimaryKey(pk);
   }

   public void ejbLoad() 
   {
      getDao().load((cuhk.ale.ejb.interfaces.ECSpecInstancePK) ctx.getPrimaryKey(), this);
      makeClean();
   }

   public void ejbStore() 
   {
      if (isModified())
      {
         getDao().store((cuhk.ale.ejb.ECSpecInstanceBean) this);
         makeClean();
      }
   }

   public void ejbActivate() 
   {
   }

   public void ejbPassivate() 
   {

      ECSpecInstanceValue = null;
   }

   private javax.ejb.EntityContext ctx = null;

   public void setEntityContext(javax.ejb.EntityContext ctx) 
   {
      super.setEntityContext(ctx);
      this.ctx = ctx;
   }

   public void unsetEntityContext() 
   {
      this.ctx = null;
   }

   public void ejbRemove() throws javax.ejb.EJBException, java.rmi.RemoteException, javax.ejb.RemoveException
   {
      super.ejbRemove();

      getDao().remove((cuhk.ale.ejb.interfaces.ECSpecInstancePK) ctx.getPrimaryKey());

   }

      private static cuhk.ale.dao.ECSpecInstanceDAO dao = null;

   protected static synchronized cuhk.ale.dao.ECSpecInstanceDAO getDao()
   {
      if (dao != null) {
         return dao;
      } else {

         dao = (cuhk.ale.dao.ECSpecInstanceDAO) new cuhk.ale.dao.ECSpecInstanceDAOImpl();

         dao.init();
         return dao;
      }
   }

    public java.util.List getNotificationURLs(java.lang.String specName)
    {

        return getDao().getNotificationURLs(specName);

    }

    public void addNotificationURL(java.lang.String specName,java.lang.String url)
    {

        getDao().addNotificationURL(specName,url);

    }

    public void deleteNotificationURL(java.lang.String specName,java.lang.String url)
    {

        getDao().deleteNotificationURL(specName,url);

    }

    public java.util.List ejbHomeGetSpecNames()
    {

        return getDao().getSpecNames();

    }

    public java.util.List getTagRead(java.util.List readers,long lastStart,long lastSSI)
    {

        return getDao().getTagRead(readers,lastStart,lastSSI);

    }

   /* Value Objects BEGIN */

   private cuhk.ale.valueobjects.ECSpecInstanceValue ECSpecInstanceValue = null;

   public cuhk.ale.valueobjects.ECSpecInstanceValue getECSpecInstanceValue()
   {
      ECSpecInstanceValue = new cuhk.ale.valueobjects.ECSpecInstanceValue();
      try
         {
            ECSpecInstanceValue.setSpecName( getSpecName() );
            ECSpecInstanceValue.setStartTime( getStartTime() );
            ECSpecInstanceValue.setPreviousStartTime( getPreviousStartTime() );
            ECSpecInstanceValue.setPreviousEndTime( getPreviousEndTime() );
            ECSpecInstanceValue.setStateVersion( getStateVersion() );
            ECSpecInstanceValue.setECSpec( getECSpec() );
            ECSpecInstanceValue.setState( getState() );

         }
         catch (Exception e)
         {
            throw new javax.ejb.EJBException(e);
         }

	  return ECSpecInstanceValue;
   }

   public void setECSpecInstanceValue( cuhk.ale.valueobjects.ECSpecInstanceValue valueHolder )
   {

	  try
	  {
		 setStartTime( valueHolder.getStartTime() );
		 setPreviousStartTime( valueHolder.getPreviousStartTime() );
		 setPreviousEndTime( valueHolder.getPreviousEndTime() );
		 setStateVersion( valueHolder.getStateVersion() );
		 setECSpec( valueHolder.getECSpec() );
		 setState( valueHolder.getState() );

	  }
	  catch (Exception e)
	  {
		 throw new javax.ejb.EJBException(e);
	  }
   }

/* Value Objects END */

}
